{
  "FY20Seminar_Demo_Setup" : {
    "Type" : "SimpleFolder",
    "ControlmServer" : "controlm", "SiteStandard" : "WideOpen",
    "OrderMethod" : "Manual",
    "Setup_CTM_on_K8S" : {
      "Type" : "Job:EmbeddedScript",
      "Script" : "#!/bin/bash -xe\\n# Use to log execution when not running under Control-M\\n# - exec 1>/home/ctmmft/srvr_preplog.out 2>&1\\n# - Control-M job runs as ctmmft user\\n#\\n# Provide artifacts for K8S jobs\\n#\\nsudo su - bitnami -c \"mkdir ctmArtifacts\"\\nsudo su - bitnami -c \"wget --no-check-certificate https://s3-us-west-2.amazonaws.com/623469066856-fy20seminars/ctmArtifacts.tar\"\\nsudo su - bitnami -c \"mv /home/bitnami/ctmArtifacts.tar /home/bitnami/ctmArtifacts/\"\\nsudo su - bitnami -c \"tar -xvf /home/bitnami/ctmArtifacts/ctmArtifacts.tar -C /home/bitnami/ctmArtifacts/\"\\nsudo su - bitnami -c \"rm /home/bitnami/ctmArtifacts/ctmArtifacts.tar\"\\n#\\n# Update Control-M Environment Info\\n#\\nsudo su - bitnami -c \"mkdir ctmArtifacts/ctmprod\"\\nsudo su - bitnami -c \"echo \\\"https://controlm:8443/automation-api\\\" > /home/bitnami/ctmArtifacts/ctmprod/endpoint.secret\"\\nsudo su - bitnami -c \"echo \\\"apiuser\\\" > /home/bitnami/ctmArtifacts/ctmprod/username.secret\"\\nsudo su - bitnami -c \"echo \\\"rtcqlAC2\\\" > /home/bitnami/ctmArtifacts/ctmprod/password.secret\"\\n#\\n# Provide Kubernetes configuration for K8S API\\n#\\nsudo cp /etc/kubernetes/admin.conf /home/bitnami/ctmArtifacts/admin.conf\\nsudo chown 644 /home/bitnami/ctmArtifacts/admin.conf#\\n# Label our node so that K8S will start an agent here\\n#\\nsudo kubectl label nodes `hostname` WorkflowManager=controlm\\n#\\n# Docker Registry secret\\n#\\nsudo kubectl create secret docker-registry regcred --docker-server=https://index.docker.io/v1/ --docker-username=joegoldberg --docker-password=FTkKCm03 --docker-email=joe_goldberg@bmc.com\\n#\\n# Create Cluster Role and Service Account and define Contorl-M Agent DaemonSet\\n#\\nsudo kubectl create -f /home/bitnami/ctmArtifacts/ClusterRole_and_ServiceAccount.yaml\\nsudo kubectl create -f /home/bitnami/ctmArtifacts/ctmagentDaemonSet.yaml",
      "SubApplication" : "K8S_Prep",
      "EndFolder" : true,
      "FileName" : "Setup_CTM_on_K8S.sh",
      "Host" : "KafkaMaster",
      "CreatedBy" : "JoeG",
      "RunAs" : "ctmmft",
      "Application" : "FY20Seminar",
      "When" : {
        "WeekDays" : [ "NONE" ],
        "MonthDays" : [ "ALL" ],
        "SpecificDates" : [ ],
        "DaysRelation" : "OR"
      },
      "eventsToAdd" : {
        "Type" : "AddEvents",
        "Events" : [ {
          "Event" : "Setup_CTM_on_K8S-TO-Setup_Kafka"
        } ]
      }
    },
    "Setup_Kafka" : {
      "Type" : "Job:EmbeddedScript",
      "Script" : "#!/bin/bash -xe\\n# Use to log execution when not running under Control-M\\n# - exec 1>/home/ctmmft/kafka_preplog.out 2>&1\\n# - Control-M job runs as ctmmft user\\n#\\n# Install Kafka - run as ctmmft user\\n#\\nsudo apt-get -y install zookeeperd\\nsudo adduser --system --no-create-home --disabled-password --disabled-login kafka\\ncd ~\\nwget \"http://www-eu.apache.org/dist/kafka/2.1.1/kafka_2.12-2.1.1.tgz\"\\ncurl http://kafka.apache.org/KEYS | gpg --import\\nwget https://dist.apache.org/repos/dist/release/kafka/2.1.1/kafka_2.12-2.1.1.tgz.asc\\ngpg --verify kafka_2.12-2.1.1.tgz.asc kafka_2.12-2.1.1.tgz\\n\\nsudo mkdir /opt/kafka\\nsudo tar -xvzf kafka_2.12-2.1.1.tgz --directory /opt/kafka --strip-components 1\\n\\nrm -rf kafka_2.12-2.1.1.tgz kafka_2.12-2.1.1.tgz.asc\\n\\nsudo mkdir /var/lib/kafka\\nsudo mkdir /var/lib/kafka/data\\n#\\n# Append the following lines to /opt/kafka/config/server.properties\\n#\\nsudo cp /opt/kafka/config/server.properties server.properties.temp\\nsudo chown ctmmft:ctmmft server.properties.temp\\ncat << 'EOF' >> server.properties.temp\\n\\ndelete.topic.enable = true \\nlog.dirs=/var/lib/kafka/data\\nlog.retention.hours=168\\nlog.retention.bytes=104857600\\nEOF\\n\\nsudo cp server.properties.temp /opt/kafka/config/server.properties\\n\\nsudo chown -R kafka:nogroup /opt/kafka\\nsudo chown -R kafka:nogroup /var/lib/kafka\\n\\n#\\n# Set up Kafka as a service \\n# ExecStart=/opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties > /opt/kafka/server.log  <-- optional redirect log\\n#\\ncat << 'EOF' > kafka.service \\n[Unit]\\nDescription=High-available, distributed message broker\\nAfter=network.target\\n[Service]\\nUser=kafka\\nExecStart=/opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties\\n\\n[Install]\\nWantedBy=multi-user.target\\nEOF\\nsudo mv kafka.service /etc/systemd/system/kafka.service\\nsudo chown root:root /etc/systemd/system/kafka.service\\n\\nsudo systemctl start kafka.service\\nsudo systemctl restart zookeeper.service \\nsleep 120\\n\\n/opt/kafka/bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic tweets",
      "SubApplication" : "K8S_Prep",
      "EndFolder" : true,
      "FileName" : "setup_kafka.sh",
      "Host" : "KafkaMaster",
      "CreatedBy" : "JoeG",
      "RunAs" : "ctmmft",
      "Application" : "FY20Seminar",
      "When" : {
        "WeekDays" : [ "NONE" ],
        "MonthDays" : [ "ALL" ],
        "SpecificDates" : [ ],
        "DaysRelation" : "OR"
      },
      "eventsToWaitFor" : {
        "Type" : "WaitForEvents",
        "Events" : [ {
          "Event" : "Setup_CTM_on_K8S-TO-Setup_Kafka"
        } ]
      },
      "eventsToDelete" : {
        "Type" : "DeleteEvents",
        "Events" : [ {
          "Event" : "Setup_CTM_on_K8S-TO-Setup_Kafka"
        } ]
      }
    }
  }
}
