{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "172.1.12.240/28",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [{"Key": "Name", "Value": "VPC FY20Seminar AppDev Session"}]
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "172.1.12.240/28",
        "AvailabilityZone": "us-west-2c",
        "VpcId": {"Ref": "VPC"},
        "Tags": [{"Key": "Name", "Value": "SubNet FY20Seminar AppDev Session"}]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{"Key": "Name", "Value": "InternetGateway FY20Seminar AppDev Session"}]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "InternetGatewayId": {"Ref": "InternetGateway"}
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {"VpcId": {"Ref": "VPC"}}
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {"Ref": "PublicRouteTable"},
        "GatewayId": {"Ref": "InternetGateway"}
      },
      "DependsOn": "AttachGateway"
    },
    "PublicSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : {"Ref" : "PublicSubnet"},
        "RouteTableId" : {"Ref" : "PublicRouteTable"}
      }
    },
    "CTMInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": "ami-05d1f75ff109575f3",
        "InstanceType": "m4.xlarge",
        "KeyName": "FY20AppDevDemo",
        "Monitoring": "false",
        "Tags": [{"Key": "Name", "Value": "FY20 Seminar AppDev Demo Control-M Instance"}],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {"Ref": "PublicSubnet"},
            "GroupSet": [{"Ref": "CTMSecurityGroup"}],
            "AssociatePublicIpAddress": "true"
          }
        ]
      },
      "DependsOn": "AttachGateway"
    },
    "K8SInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": "ami-0667c8a7d4c548615",
        "InstanceType": "t3.large",
        "KeyName": "FY20AppDevDemo",
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#cloud-boothook\n",
             "#!/bin/bash -xe\n",
             "exec 1>/var/lib/cloud/instance/userdata_log.out 2>&1\n",
             "if [ ! -e /var/lib/cloud/instance/ctmdone.txt ]; then\n",
             "   touch /var/lib/cloud/instance/ctmdone.txt\n",
			 "   apt-get -y update\n",
             "   CtmIP=$(echo ", {"Fn::GetAtt" : [ "CTMInstance", "PrivateIp" ]}, ")\n",
             "   MyHostname=$(curl -s http://169.254.169.254/latest/meta-data/local-hostname | cut -d. -f1)\n",
             "   apt-get -y install python-software-properties\n",
             "   curl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash -\n",
             "   apt-get -y install nodejs\n",
             "   add-apt-repository -y ppa:openjdk-r/ppa\n",
             "   apt-get -y update\n",
             "   apt-get -y install openjdk-8-jre\n",
             "   useradd -d /home/ctmmft -m -s /bin/bash ctmmft\n",
             "   echo 'ctmmft ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers\n",
             "   cat /etc/hosts\n",
             "   wget --no-check-certificate https://s3-us-west-2.amazonaws.com/623469066856-fy20seminars/ctm-cli.tgz \n",
             "   npm install -g ctm-cli.tgz\n",
             "   printf '\n' >> /etc/hosts\n",
             "   echo \"$CtmIP controlm\" >> /etc/hosts \n",
             "   cat /etc/hosts\n",
             "   date\n",
             "   sleep 600\n",
             "   date\n",
             "   su - ctmmft -c \"ctm env add ctmprod https://$CtmIP:8443/automation-api apiuser rtcqlAC2\"\n",
             "   su - ctmmft -c \"ctm prov agent::install Agent.Linux controlm $MyHostname\"\n",
             "   su - ctmmft -c \"ctm config server:hostgroup:agent::add controlm KafkaMaster $MyHostname\"\n",
             "fi\n"
        ]]}},
        "Monitoring": "false",
        "Tags": [{"Key": "Name", "Value": "FY20 Seminar AppDev Demo Kubernetes Master Instance"}],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {"Ref": "PublicSubnet"},
            "GroupSet": [{"Ref": "K8SSecurityGroup"}],
            "AssociatePublicIpAddress": "true"
          }
        ]
      },
      "DependsOn": ["AttachGateway", "CTMInstance"]
    },
    "CTMSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Control-M Server Security Group",
        "VpcId": {"Ref": "VPC"},
        "Tags": [{"Key": "Name", "Value": "CTM Security Group FY20Seminar AppDev Session"}]
      }
    },
    "RDPIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {"GroupId": {"Ref": "CTMSecurityGroup"},
        "IpProtocol": "tcp", "FromPort": "3389", "ToPort": "3389", "CidrIp": "0.0.0.0/0"}
    },
    "RestSrvrIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {"GroupId": {"Ref": "CTMSecurityGroup"},
        "IpProtocol": "tcp", "FromPort": "8443", "ToPort": "8443", "SourceSecurityGroupId": {"Ref": "K8SSecurityGroup"}}
    },    
    "CTMAgentIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {"GroupId": {"Ref": "CTMSecurityGroup"},
        "IpProtocol": "tcp", "FromPort": "7005", "ToPort": "7005", "SourceSecurityGroupId": {"Ref": "K8SSecurityGroup"}}
    },    
    "WebServerInrgess": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {"GroupId": {"Ref": "CTMSecurityGroup"},
        "IpProtocol": "tcp", "FromPort": "18080", "ToPort": "18080", "SourceSecurityGroupId": {"Ref": "K8SSecurityGroup"}}
    },
    "ICMPIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {"GroupId": {"Ref": "CTMSecurityGroup"}, 
        "IpProtocol": "icmp", "FromPort": "-1", "ToPort": "-1", "SourceSecurityGroupId": {"Ref": "K8SSecurityGroup"}}
    },
    "SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {"GroupId": {"Ref": "CTMSecurityGroup"}, "IpProtocol": "-1", "CidrIp": "0.0.0.0/0"}
    },
     "K8SSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Kubernetes in FY20 AppDevDemo",
        "VpcId": {"Ref": "VPC"},
        "Tags": [{"Key": "Name", "Value": "KubernetesSG FY20 AppDev Demo"}]
      }
    },
    "KubernetesSSHIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {"GroupId": {"Ref": "K8SSecurityGroup"},
        "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0"}
    },
    "CTMServer2AgentProvisionIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {"GroupId": {"Ref": "K8SSecurityGroup"},
        "IpProtocol": "tcp", "FromPort": "7000", "ToPort": "8000", "SourceSecurityGroupId": {"Ref": "CTMSecurityGroup"}}
    },
    "KubernetesICMPIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {"GroupId": {"Ref": "K8SSecurityGroup"},
        "IpProtocol": "icmp", "FromPort": "-1", "ToPort": "-1", "SourceSecurityGroupId": {"Ref": "CTMSecurityGroup"}}
    },
    "K8SSecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {"GroupId": {"Ref": "K8SSecurityGroup"},
        "IpProtocol": "-1", "CidrIp": "0.0.0.0/0"}}
  },
  "Outputs": {
    "CTMInstancePublicIP": {
      "Description": "CTM Server Instance Public IP Address",
      "Value": {"Fn::GetAtt": ["CTMInstance", "PublicIp"]}
    },
    "K8SInstancePublicIP": {
      "Description": "Kubernetes Instance Public IP Address",
      "Value": {"Fn::GetAtt": ["K8SInstance", "PublicIp"]}
    }
  },
  "Description": "Control-M FY20 AppDev Demo"
}